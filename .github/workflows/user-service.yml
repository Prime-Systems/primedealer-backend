name: User Service CI/CD (Docker Hub + EC2)

on:
  push:
    paths:
      - 'user-service/**'
    branches:
      - main

env:
  DOCKER_REPO: primedealer-user-service
  WORKING_DIRECTORY: ./user-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Ensure mvnw is executable
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: chmod +x mvnw

      - name: Run tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: ./mvnw test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${DOCKER_REPO}:${GITHUB_SHA}"
          echo "Building image: $IMAGE_NAME"
          ./${{ env.WORKING_DIRECTORY }}/mvnw -f ${{ env.WORKING_DIRECTORY }}/pom.xml spring-boot:build-image -Dspring-boot.build-image.imageName="$IMAGE_NAME"
          docker push "$IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          env:
            IMAGE_NAME: ${{ env.IMAGE_NAME }}
            DB_USER: ${{ secrets.DB_MASTER_USERNAME }}
            DB_PASSWORD: ${{ secrets.DB_MASTER_PASSWORD }}
            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          script: |
            cd ~

            # Login to Docker Hub
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN

            # Create/update docker-compose.yml
            cat << EOF > docker-compose.yml
            version: '3.8'
            services:
              db:
                image: postgres:17-alpine
                environment:
                  POSTGRES_USER: ${DB_MASTER_USERNAME}
                  POSTGRES_PASSWORD: ${DB_MASTER_PASSWORD}
                  POSTGRES_DB: postgres
                ports:
                  - "5432:5432"
                volumes:
                  - user_db_data:/var/lib/postgresql/data
                restart: always

              app:
                image: ${IMAGE_NAME}
                ports:
                  - "8081:8081"
                environment:
                  DB_URL: jdbc:postgresql://db:5432/postgres
                  DB_USERNAME: ${DB_MASTER_USERNAME}
                  DB_PASSWORD: ${DB_MASTER_PASSWORD}
                depends_on:
                  - db
                restart: always

            volumes:
              user_db_data:
            EOF

            # Pull and start containers
            docker-compose pull
            docker-compose up -d --force-recreate
