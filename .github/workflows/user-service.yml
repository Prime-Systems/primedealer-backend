name: User Service CI/CD

on:
  push:
    paths:
      - 'user-service/**'
    branches:
      - '**'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: primedealer-user-service
  WORKING_DIRECTORY: ./user-service

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Ensure mvnw is executable
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: chmod +x mvnw

      - name: Build and Push Docker image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_IMAGE_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
          echo "Building Docker image: $ECR_IMAGE_URI"

          # Build image from Spring Boot app
          ./${{ env.WORKING_DIRECTORY }}/mvnw -f ${{ env.WORKING_DIRECTORY }}/pom.xml spring-boot:build-image \
            -Dspring-boot.build-image.imageName="$ECR_IMAGE_URI"

          # Push to ECR
          docker push "$ECR_IMAGE_URI"

          # Save URI for reference (if needed)
          echo "ECR_IMAGE_URI=$ECR_IMAGE_URI" >> $GITHUB_ENV
