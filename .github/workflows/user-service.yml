name: User Service CI/CD

on:
  push:
    paths:
      - 'user-service/**'
    branches:
      - main  # <-- IMPROVEMENT: Only deploy from the 'main' branch

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: primedealer-user-service
  WORKING_DIRECTORY: ./user-service

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }} # Pass the image URI to the deploy job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Ensure mvnw is executable
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: chmod +x mvnw

      - name: Run Tests with Maven
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: ./mvnw test # <-- IMPROVEMENT: Added a test step

      - name: Build and Push Docker image
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }} # <-- IMPROVEMENT: Use Git SHA for a unique tag
          ECR_IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          echo "Building Docker image: $ECR_IMAGE_URI"

          ./${{ env.WORKING_DIRECTORY }}/mvnw -f ${{ env.WORKING_DIRECTORY }}/pom.xml spring-boot:build-image \
            -Dspring-boot.build-image.imageName="$ECR_IMAGE_URI"

          docker push "$ECR_IMAGE_URI"
          echo "image=$ECR_IMAGE_URI" >> $GITHUB_OUTPUT # Set output for next job

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          # Pass the variables directly to the 'env' input
          # This makes them available as environment variables for the script
          env:
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            IMAGE_URI: ${{ needs.build-and-push.outputs.image_uri }}
          script: |
            # The environment variables are now set automatically by the SSH action.
            # No need for the `export` lines.
            
            # Create or update docker-compose.yml file
            cat << EOF > ~/docker-compose.yml
            version: '3.8'
            services:
              db:
                image: postgres:17-alpine
                environment:
                  POSTGRES_USER: ${DB_USER}
                  POSTGRES_PASSWORD: ${DB_PASSWORD}
                  POSTGRES_DB: postgres
                ports:
                  - "5432:5432"
                volumes:
                  - user_db_data:/var/lib/postgresql/data
                restart: always
            
              app:
                image: ${IMAGE_URI}
                ports:
                  - "8081:8081"
                environment:
                  DB_URL: jdbc:postgresql://db:5432/postgres
                  DB_USERNAME: ${DB_USER}
                  DB_PASSWORD: ${DB_PASSWORD}
                depends_on:
                  - db
                restart: always
            
            volumes:
              user_db_data:
            EOF
            
            # Pull the latest images and restart the services
            cd ~
            docker-compose pull
            docker-compose up -d --force-recreate