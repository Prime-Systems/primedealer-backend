name: Simplified User Service CI/CD

on:
  push:
    paths:
      - 'user-service/**'
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: primedealer-user-service
  WORKING_DIRECTORY: ./user-service

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            GITHUB_SHA: ${{ github.sha }}
          script: |
            # Navigate to the home directory
            cd ~

            # Set the image URI using the SHA from the CI job
            IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"

            # Create or update docker-compose.yml file
            cat << EOF > ~/docker-compose.yml
            version: '3.8'
            services:
              db:
                image: postgres:17-alpine
                environment:
                  POSTGRES_USER: ${DB_USER}
                  POSTGRES_PASSWORD: ${DB_PASSWORD}
                  POSTGRES_DB: postgres
                ports:
                  - "5432:5432"
                volumes:
                  - user_db_data:/var/lib/postgresql/data
                restart: always
            
              app:
                image: ${IMAGE_URI}
                ports:
                  - "8081:8081"
                environment:
                  DB_URL: jdbc:postgresql://db:5432/postgres
                  DB_USERNAME: ${DB_USER}
                  DB_PASSWORD: ${DB_PASSWORD}
                depends_on:
                  - db
                restart: always
            
            volumes:
              user_db_data:
            EOF
            
            # Use `docker-compose` to pull the specific image and redeploy
            docker-compose pull
            docker-compose up -d --force-recreate